

;
; lab0402.asm
;
; Created: 05/10/2017 4:34:55 PM
; Author : lmcmz
;

.include "m2560def.inc"

.equ LCD_CTRL_PORT = PORTA
.equ LCD_CTRL_DDR = DDRA
.equ LCD_RS = 7
.equ LCD_E = 6
.equ LCD_RW = 5
.equ LCD_BE = 4	

.equ LCD_DATA_PORT = PORTF
.equ LCD_DATA_DDR = DDRF
.equ LCD_DATA_PIN = PINF

.def temp =r16		
.def data =r17
.def temp1	=r18
.def temp2  =r9
	
.def count  =r2
.def leds = r20
.def number = r10

.macro STORE
.if @0 > 63
sts @0, @1
.else
out @0, @1
.endif
.endmacro

.macro LOAD
.if @1 > 63
lds @0, @1
.else
in @0, @1
.endif
.endmacro

.macro do_lcd_command
	ldi r16, @0
	rcall lcd_command
	rcall lcd_wait
.endmacro

.macro do_lcd_data
	ldi r16, @0
	rcall lcd_data
	rcall lcd_wait
.endmacro

.macro lcd_set
	sbi LCD_CTRL_PORT, @0
.endmacro

.macro lcd_clr
	cbi LCD_CTRL_PORT, @0
.endmacro

; Clear a word in memory
; param @0 = mem. addr. to clear
.MACRO Clear
	ldi YL, low(@0)
	ldi YH, high(@0)
	clr temp
	st y+, temp
	st y, temp
.ENDMACRO

.MACRO     INIT_TIME1
; To generate 1s timer 1
; Timer1 is 16 bits timer, 2^16 = 65536; 65536 * 1/16M s * Clock_Selection = 1s
; Clock_Selection = 256
; Therefore: TCCR1B = 0b00000100            
LDI      TEMP,        0b00000000            
STS      TCCR1A,       TEMP         ; Normal mode            
LDI      TEMP,        0b00000100            
STS      TCCR1B,       TEMP         ; Clock selection = 256            
LDI      TEMP,        (1<<TOIE1)            
STS      TIMSK1,TEMP         ; Overflow enabled
.ENDMACRO

.cseg
.org 0
	rjmp RESET


.org OVF1addr				;Set	triggle	Timer1
	rjmp Timer1OverFlow
	

RESET:
	ldi r16, low(RAMEND)			;init	LCD
	out SPL, r16
	ldi r16, high(RAMEND)
	out SPH, r16

	ser r16
	STORE LCD_DATA_DDR, r16
	STORE LCD_CTRL_DDR, r16
	clr r16
	STORE LCD_DATA_PORT, r16
	STORE LCD_CTRL_PORT, r16

	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_5ms
	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_1ms
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00001000 ; display off
	do_lcd_command 0b00000001 ; clear display
	do_lcd_command 0b00000110 ; increment, no display shift
	do_lcd_command 0b00001110 ; Cursor on, bar, no blink

	clr temp1					; PORTL is inputs
	sts PORTL, temp1
	sts DDRL, temp1	
	
	ser	temp1					;Port	is	outputs
	out	PortC,temp1
	out	DDRC,temp1	
	
	ldi	leds,0b11110000			;init	LED	lights
	out	PORTC,leds

	clr	count		
	rjmp MAIN

Timer1OverFlow:		; interrupt subroutine for Timer1

	out PORTC, number			;display	in	LCD
	rcall	LCD_CLEAR			;clear	LCD
	rcall	LCD_DISPLAY_NUMBER	;display	speed
	clr	number					;clear	speed
	reti	; Return from Timer0OverFlow

main:
	INIT_TIME1				;Init	timer1
	clr	temp
	clr	temp1
	clr	temp2
	;sei					; Enable global interrupts
	
loop:
	lds		temp1,PinL
	cp		temp1,temp2
	breq	loop
	mov		temp2,temp1
	/*
	inc	count
	mov	number,count
	rcall	LCD_CLEAR
	rcall	LCD_DISPLAY_NUMBER
	out PORTC, count
	*/
	
	inc		temp
	cpi		temp,8		;8	times	value	change	in	one	circle
	brlo	loop
	inc		number		;inc	number	of	circle
	clr		temp
	;mov	number,temp
	;rcall	LCD_CLEAR
	;rcall	LCD_DISPLAY_NUMBER
	rjmp	loop


/////////////////////////////////////////////////


;
; Send a command to the LCD (r16)
;


lcd_command:
	STORE LCD_DATA_PORT, r16
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	lcd_clr LCD_E
	rcall sleep_1ms
	ret

lcd_data:
	STORE LCD_DATA_PORT, r16	
	lcd_set LCD_RS			;RS	->	1	
	rcall sleep_1ms
	lcd_set LCD_E			;Enable	input
	rcall sleep_1ms
	lcd_clr LCD_E			;Disable	input
	rcall sleep_1ms
	lcd_clr LCD_RS			;RS	->	0
	ret

lcd_wait:
	push r16
	clr r16
	STORE LCD_DATA_DDR, r16
	STORE LCD_DATA_PORT, r16
	lcd_set LCD_RW
lcd_wait_loop:
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	LOAD r16, LCD_DATA_PIN
	lcd_clr LCD_E
	sbrc r16, 7
	rjmp lcd_wait_loop
	lcd_clr LCD_RW
	ser r16
	STORE LCD_DATA_DDR, r16
	pop r16
	ret

.equ F_CPU = 16000000
.equ DELAY_1MS = F_CPU / 4 / 1000 - 4
; 4 cycles per iteration - setup/call-return overhead

sleep_1ms:			;delay
	push r24
	push r25
	ldi r25, high(DELAY_1MS)
	ldi r24, low(DELAY_1MS)
delayloop_1ms:
	sbiw r25:r24, 1
	brne delayloop_1ms
	pop r25
	pop r24
	ret

sleep_5ms:
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	ret

LCD_DISPLAY_NUMBER:
	;Converts the total into separate digits for printing.
	push r20;
	push r21;
	push r22;
	push r23;
	push data;

	mov r20, number ;Temporary total
	clr r21; Hundreds
	clr r22; Tens
	clr r23; Ones

	;Extract Hundreds
	extract_100s:
		cpi r20, 100			;number	<-->100
		brlo extract_10s		;go	10
		inc r21;				;hundred+1
		subi r20, 100			;x-100
		jmp extract_100s

	;Ectract Tens
	extract_10s:
		cpi r20, 10
		brlo extract_1s
		inc r22
		subi r20, 10
		rjmp extract_10s

	;Extract Ones
	extract_1s:
		cpi r20, 1
		brlo display_digits
		inc r23
		subi r20, 1
		rjmp extract_1s

	display_digits:
		mov data, r21
		cpi data, 0
		breq display_digits_two
		subi data, -'0'
		;data contains the value in ascii to be written
		rcall lcd_wait_busy
		rcall lcd_write_data	; write the character to the screen

		display_digits_two:

			cpi r22, 0
			brne display_digits_two_continue
			cpi r21, 0
			breq display_digits_one

			display_digits_two_continue:
			mov data, r22
    		subi data, -'0'
    		;data contains the value in ascii to be written
    		rcall lcd_wait_busy
    		rcall lcd_write_data	; write the character to the screen

		display_digits_one:
			mov data, r23
    		subi data, -'0'
    		;data contains the value in ascii to be written
    		rcall lcd_wait_busy
    		rcall lcd_write_data	; write the character to the screen

	pop data
	pop r23
	pop r22
	pop r21
	pop r20
	ret

lcd_wait_busy:
	clr temp
	out LCD_DATA_DDR, temp ; Make LCD_DATA_PORT be an input port for now
	out LCD_DATA_PORT, temp
	ldi temp, 1 << LCD_RW
	out LCD_CTRL_PORT, temp ; RS = 0, RW = 1 for a command port read
	busy_loop:
		nop ; delay to meet timing (Set up time / Enable cycle time)
		sbi LCD_CTRL_PORT, LCD_E ; turn on the enable pin
		nop ; delay to meet timing (Data delay time)
		nop
		nop
		in temp, LCD_DATA_PIN ; read value from LCD
		cbi LCD_CTRL_PORT, LCD_E ; turn off the enable pin
		sbrc temp, 7 ; if the busy flag is set
		rjmp busy_loop ; repeat command read
	clr temp ; else
	out LCD_CTRL_PORT, temp ; turn off read mode,
	ser temp
	out LCD_DATA_DDR, temp ; make LCD_DATA_PORT an output port again
	ret ; and return

	;Function lcd_write_data: Write a character to the LCD. The data reg stores the value to be written.
lcd_write_data:
	out LCD_DATA_PORT, data ; set the data port's value up
	ldi temp, 1 << LCD_RS
	out LCD_CTRL_PORT, temp ; RS = 1, RW = 0 for a data write
	nop ; delay to meet timing (Set up time)
	sbi LCD_CTRL_PORT, LCD_E ; turn on the enable pin
	nop ; delay to meet timing (Enable pulse width)
	nop
	nop
	cbi LCD_CTRL_PORT, LCD_E ; turn off the enable pin
	nop ; delay to meet timing (Enable cycle time)
	nop
	nop
	ret


lcd_write_com:
	out LCD_DATA_PORT, data ; set the data port's value up
	clr temp
	out LCD_CTRL_PORT, temp ; RS = 0, RW = 0 for a command write
	nop ; delay to meet timing (Set up time)
	sbi LCD_CTRL_PORT, LCD_E ; turn on the enable pin
	nop ; delay to meet timing (Enable pulse width)
	nop
	nop
	cbi LCD_CTRL_PORT, LCD_E ; turn off the enable pin
	nop ; delay to meet timing (Enable cycle time)
	nop
	nop
	ret

LCD_CLEAR:
	; Clear screen
	rcall lcd_wait_busy
	ldi data, 0b00000001
	rcall lcd_write_com
	ret